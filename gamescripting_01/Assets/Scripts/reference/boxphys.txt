using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BoxPhysics : MonoBehaviour {

	//stores incoming input
	protected Vector2 targetVelocity;
	//modify the strength of the gravity
	public float gravityModifier = 1f;
	//normals
	public float minGroundNormalY = 0.65f;
	protected bool grounded;
	protected Vector2 groundNormal;
	protected Vector2 velocity;
	protected Rigidbody2D rb2D;
	protected ContactFilter2D contactFilter;
	protected RaycastHit2D[] hitBuffer = new RaycastHit2D[16];

	protected const float shellRadius = 0.01f;
	protected const float minMoveDistance = 0.001f;

	protected List<RaycastHit2D> hitBufferList = new List<RaycastHit2D> (16);

	void OnEnable() {
		rb2D = GetComponent<Rigidbody2D>();
	}
	void Start() {
		contactFilter.useTriggers = false;
		contactFilter.SetLayerMask(Physics2D.GetLayerCollisionMask(gameObject.layer));
		contactFilter.useLayerMask = true;	
	}
	void FixedUpdate(){
		velocity += gravityModifier * Physics2D.gravity * Time.deltaTime;

		velocity.x = targetVelocity.x;

		grounded = false;

		//stores direction of movement
		//run x before why each step to handle slopes better
		Vector2 moveAlongGround = new Vector2(groundNormal.y, -groundNormal.x);
		Vector2 move = moveAlongGround * deltaPosition.x;
		Movement(move, false);

		Vector2 deltaPosition = velocity * Time.deltaTime;

		Vector2 move = Vector2.up * deltaPosition.y;

		Movement(move, true);
	}
	void Movement(Vector2 move, bool yMovement){
		float distance = move.magnitude;

		if(distance > minMoveDistance) {
			int count = rb2D.Cast(move, contactFilter, hitBuffer, distance + shellRadius);

			hitBufferList.Clear();

			for(int i = 0; i < count; i++){
				hitBufferList.Add(hitBuffer[i]);
			}
			for (int i = 0; i < hitBufferList.Count; i++){
				Vector2 currentNormal = hitBufferList[i].normal;

				if(currentNormal.y > minGroundNormalY){

					grounded = true;

					if(yMovement){
						groundNormal = currentNormal;
						currentNormal.x = 0;
					}
				}

				float projection = Vector2.Dot(velocity, currentNormal);
				if(projection < 0)
				{
					velocity = velocity - projection * currentNormal;
				}

				float modifiedDistance = hitBufferList[i].distance - shellRadius;
				distance = modifiedDistance < distance ? modifiedDistance : distance;
			}
		}

		rb2D.position = rb2D.position + move.normalized * distance;
	}
}
